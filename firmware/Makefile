##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.1.0] date: [Sun Apr 21 12:09:09 BST 2019] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = unavng_fw


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

HALPATH = drivers/STM32F4xx_HAL_Driver
USBDEVPATH = usb_device
MIDDLEWARESPATH = middlewares
FREERTOSPATH = FreeRTOS
######################################
# source
######################################
# C sources
C_SOURCES =  \
core/src/gpio.c \
core/src/main.c \
core/src/rtc.c \
core/src/sdio.c \
core/src/spi.c \
core/src/tim.c \
core/src/stm32f4xx_it.c \
core/src/stm32f4xx_hal_msp.c \
core/src/system_stm32f4xx.c \
core/src/stm32f4xx_hal_timebase_tim.c \
core/src/timing.c \
core/src/mathutils.c \
core/src/adc.c \
core/src/dma.c \
core/src/i2c.c \
core/src/usart.c \
middlewares/Third_Party/FreeRTOS/Source/croutine.c \
middlewares/Third_Party/FreeRTOS/Source/event_groups.c \
middlewares/Third_Party/FreeRTOS/Source/list.c \
middlewares/Third_Party/FreeRTOS/Source/queue.c \
middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c \
middlewares/Third_Party/FreeRTOS/Source/tasks.c \
middlewares/Third_Party/FreeRTOS/Source/timers.c \
middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.c \
middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c \
middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c \
core/src/instrumentation/instrumentation.c \
core/src/counters.c \
core/src/freertos_support.c


CPP_SOURCES = \
core/src/freertos.cpp \
rosserial/time.cpp \
core/src/modules/basemodule.cpp \
core/src/modules/baserosmodule.cpp \
core/src/modules/rosnodemodule.cpp \
core/src/modules/motormanagermodule.cpp \
core/src/modules/motorcontrollermodule.cpp \
core/src/controls/pid.cpp \
core/src/drivers/encoder.cpp \
core/src/utils/timer.cpp \
core/src/messaging.cpp



# ASM sources
ASM_SOURCES =  \
startup_stm32f407xx.s

include $(HALPATH)/stm32hal.mk
include $(USBDEVPATH)/usbdev.mk
include $(MIDDLEWARESPATH)/middlewares.mk
#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
CPPC = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
CPPC = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI) -fsingle-precision-constant

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F407xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDE_DIRS +=  \
core/include \
drivers/CMSIS/Device/ST/STM32F4xx/Include \
drivers/CMSIS/Include \
middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/ \
middlewares/Third_Party/FreeRTOS/Source/include \
middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F \
rosserial

CFLAGS                  += -Wall
CFLAGS 					+= -Wextra
CFLAGS 					+= -Wfatal-errors
CFLAGS 					+= -Wpacked
CFLAGS 					+= -Winline
CFLAGS 					+= -Wfloat-equal
CFLAGS 					+= -Wconversion
CFLAGS 					+= -Wlogical-op
CFLAGS 					+= -Wpointer-arith
CFLAGS 					+= -Wdisabled-optimization
CFLAGS                	+= -Wno-unused-parameter
CFLAGS                  += -Wa,-alh=$(@:.o=.lst)

C_INCLUDE_DIRS_EXPANDED = $(wildcard $(C_INCLUDE_DIRS))
C_INCLUDES += $(foreach dir, $(C_INCLUDE_DIRS_EXPANDED), -I$(dir))
AS_INCLUDES_DIRS_EXPANDED = $(wildcard $(AS_INCLUDES_DIRS))
AS_INCLUDES += $(foreach dir, $(AS_INCLUDES_DIRS_EXPANDED), -I$(dir))

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -fdata-sections -ffunction-sections -fno-common

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections -fno-common



ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)" -Wall

# C++ Compiler -- Required & Optimization Flags

CXXFLAGS                += $(CFLAGS)
CXXFLAGS 				+= -fabi-version=0
CXXFLAGS                += -fno-rtti
CXXFLAGS                += -fno-exceptions
CXXFLAGS				+= -fno-use-cxa-atexit
CXXFLAGS 				+= -fno-threadsafe-statics
CXXFLAGS                += -std=c++17

# C++ -- Warnings
CXXFLAGS 				+= -Weffc++
CXXFLAGS 				+= -Wfloat-equal
CXXFLAGS 				+= -Wsign-promo
CXXFLAGS 				+= -Wzero-as-null-pointer-constant
CXXFLAGS 				+= -Wmissing-declarations 
CXXFLAGS 				+= -Woverloaded-virtual
CXXFLAGS 				+= -Wsuggest-final-types
CXXFLAGS 				+= -Wsuggest-final-methods
#CXXFLAGS 				+= -Wsuggest-override
CXXFLAGS 				+= -Wsuggest-attribute=const
CXXFLAGS 				+= -Wsuggest-attribute=noreturn
CXXFLAGS 				+= -Wsuggest-attribute=format
CXXFLAGS 				+= -Wmissing-format-attribute
#CXXFLAGS 				+= -Wold-style-cast
CXXFLAGS 				+= -Wshadow
#CXXFLAGS 				+= -Wuseless-cast
CXXFLAGS 				+= -Wctor-dtor-privacy
CXXFLAGS 				+= -Wstrict-null-sentinel

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F407VGTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections -Wl,--undefined=uxTopUsedPriority

#######################################
# CppUTest
#######################################
#--- Inputs ----#
COMPONENT_NAME = uNav_CppUTest
CPPUTEST_HOME = ./testing/cpputest/

CPPUTEST_USE_EXTENSIONS = Y
CPP_PLATFORM = Gcc

SRC_DIRS = \
	src/CppUTest \
	src/Platforms/$(CPP_PLATFORM)
SRC_FILES = \


TEST_SRC_DIRS = \
	testing/src

INCLUDE_DIRS =\
	.\
	$(CPPUTEST_HOME)/include\
	core/include \
	drivers/CMSIS/Device/ST/STM32F4xx/Include \
	drivers/CMSIS/Include \
	middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/ \
	middlewares/Third_Party/FreeRTOS/Source/include \
	middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F \
	rosserial

testing/cpputest//lib/libCppUTest.a:
	cd $(CPPUTEST_HOME) && ./autogen.sh
	cd $(CPPUTEST_HOME) && ./configure
	$(MAKE) -C $(CPPUTEST_HOME) -j8
	$(MAKE) -C $(CPPUTEST_HOME) check
include $(CPPUTEST_HOME)/build/MakefileWorker.mk


# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of cpp objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR) 
	$(CPPC) -c $(CXXFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@

#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

.PHONY: flash
flash:  $(BUILD_DIR)/$(TARGET).elf
	openocd -f openocd.cfg -c "program  $(BUILD_DIR)/$(TARGET).elf verify reset" -c "shutdown"
# *** EOF ***

